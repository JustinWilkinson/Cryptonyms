@page "/Words"

@using System.Text.RegularExpressions;

@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>Words</h1>

<div class="content">
    <div class="row pl-3">
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">Information</h5>
            </div>
            <div class="card-body">
                <ul class="adjustable-font-size">
                    <li>Cryptonyms comes with 1000 built in words, you can view all the words in its dictionary below.</li>
                    <li>Each game uses 25 of these words selected at random.</li>
                    <li>If the original words aren't enough for you, you can add/remove your own words here!</li>
                </ul>
                <p class="adjustable-font-size mb-0"><strong>P.S.</strong> please be sensible with any words you add - keep it clean, keep it brief.</p>
            </div>
        </div>
    </div>
    @if (_showCreateNewWord)
    {
        <Modal Show="_showCreateNewWord" Header="Create New Word" OnPopupClosed="OnNewWordPopupClosed">
            <div class="form-group">
                <input id="newWord" type="text" class="form-control" @bind="NewWord" />
                @if (_createNewWordErrorMessage != null)
                {
                    <label class="text-danger m-2">@_createNewWordErrorMessage</label>
                }
            </div>
            <button id="saveNewWord" type="button" class="btn btn-primary" @onclick="AddNewWordAsync">Save</button>
        </Modal>
    }
    <table id="WordsTable" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Word</th>
                <th>
                    <div class="row">
                        <div class="col mr-auto">Actions</div>
                        <div class="col text-right">
                            <button type="button" class="btn btn-primary adjustable-font-size-small" style="line-height: 1;" @onclick="() => { _showCreateNewWord = true; }">Add New Word</button>
                        </div>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>


@code {
    private bool _showCreateNewWord = false;
    private string _createNewWordErrorMessage;
    private string NewWord { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("cryptonyms.initialiseWordsDataTable");

        if (!firstRender && _showCreateNewWord)
        {
            await JSRuntime.InvokeVoidAsync("cryptonyms.setFocus", "newWord");
        }
    }

    private async Task BlurSearchFieldIfEnterOrEscapeAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "Escape")
        {
            await JSRuntime.InvokeVoidAsync("cryptonyms.blurElement", "searchTerm");
        }
    }

    private void OnNewWordPopupClosed()
    {
        _showCreateNewWord = false;
        NewWord = null;
        _createNewWordErrorMessage = null;
    }

    private async Task AddNewWordAsync()
    {
        var validationMessage = await GetValidationMessage(NewWord);

        if (validationMessage == null)
        {
            await Http.PutJsonAsync("api/Word/New", NewWord);
            await JSRuntime.InvokeVoidAsync("cryptonyms.reloadDataTable", "WordsTable");
            OnNewWordPopupClosed();
        }
        else
        {
            _createNewWordErrorMessage = validationMessage;
        }
    }

    public async Task<string> GetValidationMessage(string word)
    {
        if (string.IsNullOrWhiteSpace(word))
        {
            return "Please enter a non-empty word!";
        }
        else if (word.Length > 20)
        {
            return "This word is too long - try to keep it below 20 characters.";
        }
        else if (await JSRuntime.InvokeAsync<bool>("cryptonyms.validateNewWord", word))
        {
            return $"'{word}' is already in the list!";
        }
        else if (!word.All(c => char.IsLetter(c) || c == '\'' || c == '-' || c == ' '))
        {
            return "Permitted characters are A-Z, a-z, - and '";
        }
        else if (Regex.IsMatch(word, @"(.)\1\1"))
        {
            return "That doesn't look like a word...";
        }
        else if (await Http.PostJsonAsync<bool>("api/Word/ProfanityCheck", new { Word = word }))
        {
            return "Please don't use profanities!";
        }
        else
        {
            return null;
        }
    }
}