@page "/Words"

@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>Words</h1>

@if (_allWords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="content">
        @if (_showCreateNewWord)
        {
            <Modal Show="_showCreateNewWord" Header="Create New Word" OnPopupClosed="OnNewWordPopupClosed">
                <div class="form-group">
                    <input id="newWord" type="text" class="form-control" @bind="NewWord" />
                    @if (_createNewWordErrorMessage != null)
                    {
                        <label class="text-danger m-2">@_createNewWordErrorMessage</label>
                    }
                </div>
                <button id="saveNewWord" type="button" class="btn btn-primary" @onclick="AddNewWordAsync">Save</button>
            </Modal>
        }
        <div class="form-row">
            <label class="m-2">Search:</label>
            <input id="searchTerm" type="text" class="form-control col-sm-3 col-lg-3" value="@_searchTerm" @oninput="e => SearchWords(e.Value.ToString())" @onkeydown="e => BlurSearchFieldIfEnterOrEscapeAsync(e)" />
            <label class="m-2">Found @_searchedWords.Count known words.</label>
            <button type="button" class="btn btn-primary mb-2" @onclick="() => { _showCreateNewWord = true; }">Add New Word</button>
        </div>
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Word</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var word in _searchedWords.OrderBy(w => w, StringComparer.OrdinalIgnoreCase))
                {
                    <CascadingValue Value="this">
                        <WordRow Word="@word" />
                    </CascadingValue>
                }
            </tbody>
        </table>

    </div>
}

@code {
    private List<string> _allWords;
    private List<string> _searchedWords;
    private HashSet<string> _loweredWords;
    private string _searchTerm = "";

    private bool _showCreateNewWord = false;
    private string _createNewWordErrorMessage;
    private string NewWord { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _allWords = JsonConvert.DeserializeObject<IEnumerable<string>>(await Http.GetStringAsync("api/Word/List")).ToList();
        _loweredWords = _allWords.Select(w => w.ToLowerInvariant()).ToHashSet();
        _searchedWords = _allWords;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_showCreateNewWord)
        {
            await JSRuntime.InvokeVoidAsync("cryptonyms.setFocus", "newWord");
        }
    }

    private async Task BlurSearchFieldIfEnterOrEscapeAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "Escape")
        {
            await JSRuntime.InvokeVoidAsync("cryptonyms.blurElement", "searchTerm");
        }
    }

    private void SearchWords(string newSearchTerm)
    {
        _searchTerm = newSearchTerm;
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            _searchedWords = _allWords.Where(w => w.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            _searchedWords = _allWords;
        }
    }

    private void OnNewWordPopupClosed()
    {
        _showCreateNewWord = false;
        NewWord = null;
        _createNewWordErrorMessage = null;
    }

    private async Task AddNewWordAsync()
    {
        var validationMessage = GetValidationMessage(NewWord);

        if (validationMessage == null)
        {
            _allWords.Add(NewWord);
            _loweredWords.Add(NewWord.ToLowerInvariant());
            await Http.PutJsonAsync("api/Word/New", NewWord);
            OnNewWordPopupClosed();
        }
        else
        {
            _createNewWordErrorMessage = validationMessage;
        }
    }

    public void RemoveWord(string word)
    {
        _allWords.Remove(word);
        _loweredWords.Remove(word.ToLowerInvariant());
        StateHasChanged();
    }

    public void AddEditedWord(string word)
    {
        _allWords.Add(word);
        _loweredWords.Add(word.ToLowerInvariant());
    }

    public string GetValidationMessage(string word)
    {
        if (string.IsNullOrWhiteSpace(word))
        {
            return "Please enter a non-empty word!";
        }
        else if (_loweredWords.Contains(word.ToLowerInvariant()))
        {
            return $"'{word}' is already in the list!";
        }
        else
        {
            return null;
        }
    }
}