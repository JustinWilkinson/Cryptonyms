@page "/PlayGame/{GameId}"

@using Newtonsoft.Json

@inject IHttpService Http
@inject GameStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject BlazorTimer Timer
@inject GameHubCommunicator GameHub

@if (Game == null)
{
    @if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else if (IdentifiedPlayer == null)
{
    <CascadingValue Value="this">
        <PlayerIdentification OnPlayerIdentified="StateHasChanged" />
    </CascadingValue>
}
else
{
    <div class="row justify-content-center">
        <span class="btn btn-outline-secondary game-info-toggler" @onclick="ToggleTopRowAsync">
            <span class="oi @(_topRowCollapsed ? "oi-chevron-bottom" : "oi-chevron-top")"></span>
        </span>
    </div>
    <div id="topRow" class="row pl-2">
        <div class="col-sm-auto col-lg-auto mr-auto @(IdentifiedPlayer.Team == Team.Red ? "bg-danger" : "bg-primary") rounded p-1 ">
            <p class="text-white mb-0 d-inline-block">Hi @IdentifiedPlayer.Name, you are playing as @(IdentifiedPlayer.IsSpymaster ? "the spymaster" : "a guesser") on the @IdentifiedPlayer.Team team.</p>
            <button class="@TeamButtonClass d-inline-block " style="line-height: 1em;" @onclick="UnidentifyPlayerInGameAsync">Click here to re-identify</button>
        </div>
        <div class="col-sm-auto col-lg-auto p-1 align-text-top">
            <p class="mb-0">Game started at @Game.StartedAtUtc.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</p>
        </div>
    </div>
    <div class="row">
        <div class="w-75 pl-2 pr-2 ml-auto mr-auto">
            @if (Game.CompletedMessage != null)
            {
                <Modal Header="Game Over!" Show="_showCompletionMessage">
                    <h6>@Game.CompletedMessage</h6>
                </Modal>
            }
            <div class="row">
                <CascadingValue Value="Game.Players">
                    <TeamInfo Team="Team.Blue" WordsRemaining="BlueWordsRemaining" />
                    <div class="col card border border-secondary rounded padded-card p-1">
                        <div class="card-body text-center font-weight-bold">
                            @if (!Game.CompletedAtUtc.HasValue)
                            {
                                if (Game.CurrentTurn.Clue != null)
                                {
                                    <span>@Game.CurrentTurn.Team.ToString() team's turn: @GetCurrentClueInfo()</span>
                                }
                                else
                                {
                                    <span>@Game.CurrentTurn.Team.ToString() team's turn</span>
                                }
                                if (IdentifiedAsCurrentTeamGuesserWithClue)
                                {
                                    <div class="d-inline-block ml-2">
                                        <button class="@TeamButtonClass" style="line-height: 1em;" @onclick="PassTurnAsync">Pass</button>
                                    </div>
                                }
                            }
                            else
                            {
                                <span>Game has ended</span>
                            }
                        </div>
                    </div>
                    <TeamInfo Team="Team.Red" WordsRemaining="RedWordsRemaining" />
                </CascadingValue>
            </div>
            @for (var i = 0; i < 5; i++)
            {
                <div class="row">
                    @for (var j = 0; j < 5; j++)
                    {
                        var wordIndex = 5 * i + j;
                        if (!Game.WinnningTeam.HasValue && Game.GuessedWords.Contains(wordIndex))
                        {
                            <div class="col card @GetBackgroundColourClass(wordIndex) empty-padded-card "></div>
                        }
                        else
                        {
                            <div class="col card padded-card @GetBackgroundColourClassForVisibleWord(wordIndex) @(IdentifiedAsCurrentTeamGuesserWithClue ? "pointer" : "")" @onclick="e => HandleWordGuessedAsync(wordIndex)">
                                <div class="card-body text-center font-weight-bold bg-light" style="padding: 0.25em 0;">@Game.Words[wordIndex]</div>
                            </div>
                        }
                    }
                </div>
            }
            @if (Game.CurrentTurn.Clue == null && IdentifiedPlayer.IsSpymaster && IdentifiedPlayer.Team == Game.CurrentTurn.Team)
            {
                <div class="row p-3">
                    <div class="form-inline">
                        <div class="form-group mr-2">
                            <label for="Clue" class="font-weight-bold mr-2">Clue:</label>
                            <input id="Clue" type="text" @bind="_currentClue" class="form-control " autocomplete="off" />
                        </div>
                        <div class="form-group mr-3">
                            <label for="NumberOfGuesses" class="font-weight-bold mr-2">Number of words linked:</label>
                            <input id="NumberOfGuesses" type="number" min="0" max="@WordsRemainingForCurrentTeam" value="0" @oninput="e => HandleNumberOfGuessesInput(e.Value.ToString())" class="form-control " />
                        </div>
                        <button type="button" class="@TeamButtonClass" @onclick="GiveClueAsync">Give clue</button>
                        @if (_clueErrorMessage != null)
                        {
                            <label class="text-danger ml-2">@_clueErrorMessage</label>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="mt-3" style="width: 22%;">
            <TabControl AdditionalButtonGroupClasses="w-100" AdditionalButtonClasses="adjustable-font-size-small" OnTabSelected="HandleTabSelectedAsync">
                <TabPage ButtonId="GameLogTab" Title="Game Log" OnTabSelected="() => _unreadGameLogMessageCount = 0">
                    <div class="card border rounded">
                        <div id="GameLog" class="card-body overflow-auto p-0" style="height: 75vh;">
                            <ul class="list-group">
                                @foreach (var gameLogMessage in _gameLogMessages.OrderBy(c => c.SentAt))
                                {
                                    <li class="list-group-item adjustable-font-size-small pt-2 pb-2" title="At @gameLogMessage.SentAt.ToLocalTime().ToString("HH:mm:ss")">
                                        <strong>@gameLogMessage.SentAt.ToLocalTime().ToString("HH:mm"):</strong> @gameLogMessage.PlayerName @gameLogMessage.Message
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </TabPage>
                <CascadingValue Value="GameHub">
                    <CascadingValue Value="IdentifiedPlayer">
                        <TabPage ButtonId="GlobalChatTab" Title="Global Chat" OnTabSelected="() => _unreadGlobalMessageCount = 0">
                            <Chat Id="GlobalChat" ChatId="@($"{GameId}-Global")" OverrideHubGroup="@GameId" ChatMessages="_globalChatMessages" />
                        </TabPage>
                        @if (ShowRoleChat)
                        {
                            <TabPage ButtonId="RoleChatTab" Title="@RoleChatName" OnTabSelected="() => _unreadRoleMessageCount = 0">
                                <Chat Id="RoleChat" ChatId="@RoleChatId" ChatMessages="_roleChatMessages" />
                            </TabPage>
                        }
                    </CascadingValue>
                </CascadingValue>
            </TabControl>
        </div>
    </div>
}

@code {
    public Player IdentifiedPlayer { get; set; }
    public Game Game { get; private set; }

    private List<GameMessage> _gameLogMessages;
    private List<GameMessage> _globalChatMessages;
    private List<GameMessage> _roleChatMessages;
    private int _unreadGameLogMessageCount = 0;
    private int _unreadGlobalMessageCount = 0;
    private int _unreadRoleMessageCount = 0;
    private string _selectedTab = "GameLogTab";

    private bool _showCompletionMessage;
    private string _currentClue = null;
    private int _currentNumberOfWordsLinked = 0;
    private string _clueErrorMessage;
    private bool _topRowCollapsed = false;
    private bool _endGameAnimationRun = false;
    private bool _urlWrong = false;

    private int RedWordsRemaining => Game.RedWords.Except(Game.GuessedWords).Count();
    private int BlueWordsRemaining => Game.BlueWords.Except(Game.GuessedWords).Count();
    private int WordsRemainingForCurrentTeam => Game.CurrentTurn.Team == Team.Red ? RedWordsRemaining : BlueWordsRemaining;
    private bool ShowRoleChat => IdentifiedPlayer.IsSpymaster || !IdentifiedPlayer.IsSpymaster && Game.Players.Any(p => p.Team == IdentifiedPlayer.Team && !p.IsSpymaster && p.Name != IdentifiedPlayer.Name);
    private string RoleChatId => IdentifiedPlayer.IsSpymaster ? $"{GameId}-Spymaster" : $"{GameId}-{IdentifiedPlayer.Team}Guesser";
    private string RoleChatName => IdentifiedPlayer.IsSpymaster ? "Spymaster Chat" : $"{IdentifiedPlayer.Team} Guessers Chat";
    private bool IdentifiedAsCurrentTeamGuesserWithClue => Game.CurrentTurn.Clue != null && !IdentifiedPlayer.IsSpymaster && IdentifiedPlayer.Team == Game.CurrentTurn.Team;
    private string TeamButtonClass => $"btn btn-{(IdentifiedPlayer.Team == Team.Red ? "danger" : "primary")}";

    [Parameter]
    public string GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");

        if (Game == null)
        {
            _urlWrong = true;
        }
        else
        {
            _gameLogMessages = await Http.GetAsync<List<GameMessage>>($"api/Message/GetGameMessagesForGroup?messageBoardId={GameId}-GameLog");
            _globalChatMessages = await Http.GetAsync<List<GameMessage>>($"api/Message/GetGameMessagesForGroup?messageBoardId={GameId}-Global");

            await ConfigureHubAsync();
            IdentifiedPlayer = Game.Players.SingleOrDefault(x => x.Name == Storage.PlayerName);
            if (IdentifiedPlayer != null)
            {
                if (!IdentifiedPlayer.Identified)
                {
                    await IdentifyPlayerInGameAsync();
                }
                else
                {
                    _roleChatMessages = await Http.GetAsync<List<GameMessage>>($"api/Message/GetGameMessagesForGroup?messageBoardId={RoleChatId}");
                    StartTopRowToggleTimer();
                }
            }
        }
    }

    public async Task IdentifyPlayerInGameAsync()
    {
        IdentifiedPlayer.Identified = true;
        await Task.WhenAll(
            Http.PostAsync("api/Game/UpdatePlayerInGame", new { GameId = GameId, Player = IdentifiedPlayer }),
            GameHub.UpdatePlayerIdentificationAsync(GameId, IdentifiedPlayer.Name, true),
            GameHub.AddToGroupAsync(RoleChatId)
        );
        _roleChatMessages = await Http.GetAsync<List<GameMessage>>($"api/Message/GetGameMessagesForGroup?messageBoardId={RoleChatId}");
        await UpdateGameLogAsync("has joined the game.");
        StartTopRowToggleTimer();
    }

    public async Task UnidentifyPlayerInGameAsync()
    {
        Timer.StopTimer();
        IdentifiedPlayer.Identified = false;
        await Task.WhenAll(
            Http.PostAsync("api/Game/UpdatePlayerInGame", new { GameId = GameId, Player = IdentifiedPlayer }),
            GameHub.UpdatePlayerIdentificationAsync(GameId, IdentifiedPlayer.Name, false),
            GameHub.RemoveFromGroupAsync(RoleChatId)
        );
        await UpdateGameLogAsync("has left the game.");
        Storage.PlayerName = null;
        IdentifiedPlayer = null;
    }

    public async Task AddPlayerToGameAsync()
    {
        await Task.WhenAll(
            Http.PostAsync("api/Game/UpdatePlayerInGame", new { GameId = GameId, Player = IdentifiedPlayer }),
            GameHub.AddNewPlayerToGameAsync(GameId, IdentifiedPlayer)
        );
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && IdentifiedPlayer != null)
        {
            await JSRuntime.InvokeVoidAsync("cryptonyms.scrollToBottomOfElement", "GameLog");
            await JSRuntime.InvokeVoidAsync("cryptonyms.replaceAllContent", "GameLogTab", $"Game Log{(_unreadGameLogMessageCount > 0 ? $" ({_unreadGameLogMessageCount})" : "")}");
            await JSRuntime.InvokeVoidAsync("cryptonyms.replaceAllContent", "GlobalChatTab", $"Global Chat{(_unreadGlobalMessageCount > 0 ? $" ({_unreadGlobalMessageCount})" : "")}");
            await JSRuntime.InvokeVoidAsync("cryptonyms.replaceAllContent", "RoleChatTab", $"{RoleChatName}{(_unreadRoleMessageCount > 0 ? $" ({_unreadRoleMessageCount})" : "")}");

            if (_showCompletionMessage && !_endGameAnimationRun)
            {
                _endGameAnimationRun = true;
                await JSRuntime.InvokeVoidAsync("cryptonyms.gameCompletedAnimation", Game.WinnningTeam.Value.ToString().ToLower(), Game.GuessedWords.Contains(Game.Assassin));
            }
        }
    }

    private async Task HandleTabSelectedAsync(TabPage page)
    {
        _selectedTab = page.ButtonId;
        await JSRuntime.InvokeVoidAsync("cryptonyms.replaceContent", page.ButtonId, @"\s\(\d+\)", "");
    }

    private async Task ConfigureHubAsync()
    {
        GameHub.RegisterHandler<string>("UpdateGame", updatedGame =>
        {
            Game = JsonConvert.DeserializeObject<Game>(updatedGame);
            if (Game.WinnningTeam.HasValue)
            {
                _showCompletionMessage = true;
            }
            StateHasChanged();
        });
        GameHub.RegisterHandler<GameMessage>("NewGameLogMessage", gameLogMessage =>
        {
            _gameLogMessages.Add(gameLogMessage);
            if (_selectedTab != "GameLogTab")
            {
                _unreadGameLogMessageCount++;
            }
            StateHasChanged();
        });
        GameHub.RegisterHandler<GameMessage>("GlobalChat", globalChatMessage =>
        {
            _globalChatMessages.Add(globalChatMessage);
            if (_selectedTab != "GlobalChatTab")
            {
                _unreadGlobalMessageCount++;
            }
            StateHasChanged();
        });
        GameHub.RegisterHandler<GameMessage>("RoleChat", roleChatMessage =>
        {
            _roleChatMessages.Add(roleChatMessage);
            if (_selectedTab != "RoleChatTab")
            {
                _unreadRoleMessageCount++;
            }
            StateHasChanged();
        });
        GameHub.RegisterHandler<string, bool>("UpdatePlayerIdentification", (playerName, identified) =>
        {
            var updatedPlayer = Game.Players.SingleOrDefault(p => p.Name == playerName);
            if (updatedPlayer != null)
            {
                updatedPlayer.Identified = identified;
            }
        });
        GameHub.RegisterHandler<Player>("AddNewPlayerToGame", (player) =>
        {
            Game.Players.Add(player);
            StateHasChanged();
        });

        await GameHub.StartAsync();
        await GameHub.AddToGroupAsync(GameId);
    }

    private async Task HandleWordGuessedAsync(int wordIndex)
    {
        if (IdentifiedAsCurrentTeamGuesserWithClue && !Game.CompletedAtUtc.HasValue)
        {
            Game.CurrentTurn.NumberOfGuesses = Game.CurrentTurn.NumberOfGuesses - 1;

            string messageSuffix;
            if (Game.CompletedMessage == null)
            {
                Game.GuessedWords.Add(wordIndex);

                if (Game.Assassin == wordIndex)
                {
                    Game.WinnningTeam = (Team)(1 - Game.CurrentTurn.Team);
                    Game.CompletedMessage = $"{IdentifiedPlayer.Name} bumped into the assassin and was killed. Team {Game.WinnningTeam.ToString().ToLower()} wins!";
                }
                else if (Game.BlueWords.All(bw => Game.GuessedWords.Contains(bw)))
                {
                    Game.CompletedMessage = "Team blue wins!";
                    Game.WinnningTeam = Team.Blue;
                }
                else if (Game.RedWords.All(rw => Game.GuessedWords.Contains(rw)))
                {
                    Game.CompletedMessage = "Team red wins!";
                    Game.WinnningTeam = Team.Red;
                }

                if (Game.CompletedMessage != null)
                {
                    _showCompletionMessage = true;
                    Game.CompletedAtUtc = DateTime.UtcNow;
                    messageSuffix = $". {Game.CompletedMessage}";
                }
                else
                {
                    if (Game.CurrentTurn.Team == Team.Red && !Game.RedWords.Contains(wordIndex))
                    {
                        Game.CurrentTurn = new Turn { Team = Team.Blue };
                        messageSuffix = $" incorrectly {(Game.BlueWords.Contains(wordIndex) ? "(blue)" : "(neutral)")}. Blue team's turn started.";
                    }
                    else if (Game.CurrentTurn.Team == Team.Blue && !Game.BlueWords.Contains(wordIndex))
                    {
                        Game.CurrentTurn = new Turn { Team = Team.Red };
                        messageSuffix = $" incorrectly {(Game.RedWords.Contains(wordIndex) ? "(red)" : "(neutral)")}. Red team's turn started.";
                    }
                    else
                    {
                        messageSuffix = " correctly";

                        if (Game.CurrentTurn.NumberOfGuesses == 0)
                        {
                            Game.CurrentTurn = new Turn { Team = (Team)(1 - Game.CurrentTurn.Team) };
                            messageSuffix += $". All guesses used up. {Game.CurrentTurn.Team} team's turn started.";
                        }
                    }
                }

                await UpdateGameAsync($"guessed {Game.Words[wordIndex]}{messageSuffix}");
            }
        }
    }

    private async Task PassTurnAsync()
    {
        Game.CurrentTurn = new Turn { Team = (Team)(1 - Game.CurrentTurn.Team) };
        await UpdateGameAsync($"passed. {Game.CurrentTurn.Team} team's turn started.");
    }

    private string GetBackgroundColourClass(int wordIndex)
    {
        if (Game.Assassin == wordIndex)
        {
            return "bg-dark";
        }
        else if (Game.BlueWords.Contains(wordIndex))
        {
            return "bg-primary";
        }
        else if (Game.RedWords.Contains(wordIndex))
        {
            return "bg-danger";
        }
        else
        {
            return "bg-warning";
        }
    }

    private string GetBackgroundColourClassForVisibleWord(int wordIndex) => (IdentifiedPlayer.IsSpymaster || Game.WinnningTeam.HasValue) ? GetBackgroundColourClass(wordIndex) : "bg-warning";

    private void ClosePopup() => _showCompletionMessage = false;

    private void HandleNumberOfGuessesInput(string input) => _currentNumberOfWordsLinked = !string.IsNullOrEmpty(input) ? Convert.ToInt32(input) : 0;

    private string GetCurrentClueInfo()
    {
        if (Game.CurrentTurn.NumberOfGuesses == 1)
        {
            return "Bonus Guess";
        }
        else if (Game.CurrentTurn.NumberOfGuesses == Game.CurrentTurn.InitialNumberOfGuesses)
        {
            return $"{Game.CurrentTurn.Clue} - {Game.CurrentTurn.NumberOfGuesses - 1}";
        }
        else
        {
            return $"{Game.CurrentTurn.Clue} - {Game.CurrentTurn.NumberOfGuesses - 1}/{Game.CurrentTurn.InitialNumberOfGuesses - 1}";
        }
    }

    private async Task GiveClueAsync()
    {
        if (string.IsNullOrWhiteSpace(_currentClue))
        {
            _clueErrorMessage = "Clue cannot be blank!";
        }
        else if (Game.Words.Any(x => x.Value.ToLower() == _currentClue.ToLower() && !Game.GuessedWords.Contains(x.Key)))
        {
            _clueErrorMessage = "Clue cannot be an uncovered word!";
        }
        else if (_currentClue.Contains(' '))
        {
            _clueErrorMessage = "Clue must be a single word!";
        }
        else if (_currentNumberOfWordsLinked < 1 || _currentNumberOfWordsLinked > WordsRemainingForCurrentTeam)
        {
            _clueErrorMessage = $"Number of words linked must be between 1 and {WordsRemainingForCurrentTeam}!";
        }
        else
        {
            Game.CurrentTurn.Clue = _currentClue;
            Game.CurrentTurn.InitialNumberOfGuesses = _currentNumberOfWordsLinked + 1;
            Game.CurrentTurn.NumberOfGuesses = Game.CurrentTurn.InitialNumberOfGuesses;
            await UpdateGameAsync($"gave clue: {_currentClue} for {_currentNumberOfWordsLinked}.");
            _currentClue = null;
            _currentNumberOfWordsLinked = 0;
            _clueErrorMessage = null;
        }
    }

    private async Task UpdateGameLogAsync(string logMessage)
    {
        var gameLogId = $"{GameId}-GameLog";
        var gameLogMessage = new GameMessage(IdentifiedPlayer.Name, logMessage);
        _gameLogMessages.Add(gameLogMessage);
        await Task.WhenAll(
            Http.PutAsync("api/Message/AddMessage", new { MessageBoardId = gameLogId, GameMessage = gameLogMessage }),
            GameHub.SendGameMessageAsync(GameId, "NewGameLogMessage", gameLogMessage));
        await JSRuntime.InvokeVoidAsync("cryptonyms.scrollToBottomOfElement", "GameLog");
    }

    private async Task UpdateGameAsync(string logMessage)
    {
        var serializedGame = JsonConvert.SerializeObject(Game);
        await Task.WhenAll(Http.PostAsync("api/Game/Save", serializedGame), GameHub.UpdateGameAsync(GameId, serializedGame), UpdateGameLogAsync(logMessage));
    }

    private async Task ToggleTopRowAsync()
    {
        _topRowCollapsed = !_topRowCollapsed;
        await JSRuntime.InvokeVoidAsync("cryptonyms.slideToggle", "topRow");
        StateHasChanged();
    }

    private void StartTopRowToggleTimer()
    {
        Timer.SetTimer(5000);
        Timer.OnElapsed += async () =>
        {
            if (!_topRowCollapsed)
            {
                await ToggleTopRowAsync();
            }
        };
    }
}
