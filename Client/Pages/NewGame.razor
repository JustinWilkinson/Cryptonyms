@page "/NewGame"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject LocalStorage Storage
@inject IJSRuntime JSRuntime

<div class="row mb-2">
    <h2 class="col-2 mb-0 mr-3">New Game</h2>
    @if (!_makePrivateGame)
    {
        <div class="form-inline col-8">
            <div class="form-group row w-100" title="Provide a name for your public game to make it more recognizable.">
                <label class="col-form-label mr-2">Game Name: (optional)</label>
                <input type="text" class="form-control col-4" placeholder="Enter a game name..." @bind="_newGameName" />
            </div>
        </div>
    }
</div>
<div class="row pl-3 mb-3">
    <p class="mb-0">
        Create players for your game, and assign them to teams here by dragging and dropping them in the relevant area.<br>
        Alternatively, use the random teams button to assign players for you!
    </p>
</div>

@if (_players == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="content">
        <Modal Show="_showCreateNewPlayer" Header="Create New Player" OnPopupClosed="OnNewPlayerPopupClosed">
            <div class="form-group">
                <input id="newPlayerName" type="text" class="form-control" @bind="NewPlayerName" />
                @if (_createNewPlayerErrorMessage != null)
                {
                    <label class="text-danger">@_createNewPlayerErrorMessage</label>
                }
            </div>
            <button id="saveNewPlayer" type="button" class="btn btn-primary" @onclick="AddNewPlayerAsync">Save</button>
        </Modal>
        <Modal Show="_validationErrors.Count > 0" Header="Could not start game!" OnPopupClosed="() => _validationErrors.Clear()">
            <div class="form-group">
                <ul>
                    @foreach (var error in _validationErrors)
                    {
                        <li class="text-danger">@error</li>
                    }
                </ul>
            </div>
        </Modal>
        <div class="row" style="height: 75vh;">
            <TeamContainer Players="_players" OnPlayerUpdated="StateHasChanged" OnPlayerDeleted="player => HandleDeletedPlayer(player)" DeviceId="@_deviceId">
                <div class="col-sm-6 col-lg-6 border p-3" style="height: calc(94% + 1em);">
                    <PlayerList Team="null" />
                </div>
                <div class="col-sm-6 col-lg-6">
                    <div class="bg-primary overflow-auto p-3 mb-3" style="height: 47%;">
                        <PlayerList Team="Team.Blue" />
                    </div>
                    <div class="bg-danger overflow-auto p-3" style="height: 47%;">
                        <PlayerList Team="Team.Red" />
                    </div>
                </div>
            </TeamContainer>
        </div>
        <div class="row">
            <div class="form-inline">
                <button type="button" class="btn btn-primary mr-2" @onclick="() => { _showCreateNewPlayer = true; }">Add new player</button>
                <button type="button" class="btn btn-primary mr-2" @onclick="RandomiseTeamsAsync">Random teams</button>
                <button type="button" class="btn btn-primary mr-2" @onclick="() => { _makePrivateGame = !_makePrivateGame; }">Make game @(_makePrivateGame ? "public" : "private")</button>
                <button type="button" class="btn btn-primary mr-2" @onclick="StartGameAsync">Start game</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Player> _players;
    private string NewPlayerName { get; set; }

    private bool _showCreateNewPlayer;
    private string _createNewPlayerErrorMessage;

    private List<string> _validationErrors = new List<string>();
    private string _deviceId;
    private bool _makePrivateGame;
    private string _newGameName;

    protected override async Task OnInitializedAsync()
    {
        _deviceId = Storage.GetItem("deviceId");
        if (_deviceId == null)
        {
            _deviceId = Guid.NewGuid().ToString();
            Storage.SetItem("deviceId", _deviceId);
            _players = new List<Player>();
        }
        else
        {
            _players = JsonConvert.DeserializeObject<IEnumerable<Player>>(await Http.GetStringAsync($"api/Player/List?deviceId={_deviceId}")).ToList();
        }
        RemoveIdentificationIfNotFound();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_showCreateNewPlayer)
        {
            await JSRuntime.InvokeVoidAsync("codenames.setFocus", "newPlayerName");
        }
    }

    private async Task StartGameAsync()
    {
        if (TeamsValid())
        {
            var gameId = await Http.PutJsonAsync<Guid>("api/Game/New", new { Players = JsonConvert.SerializeObject(_players.Where(x => x.Team != null)), PrivateGame = _makePrivateGame, GameName = _newGameName });
            NavigationManager.NavigateTo($"PlayGame/{gameId}");
        }
    }

    private async Task AddNewPlayerAsync()
    {
        if (!string.IsNullOrWhiteSpace(NewPlayerName))
        {
            if (!_players.Any(p => p.Name == NewPlayerName))
            {
                var player = new Player { Name = NewPlayerName };
                _players.Add(player);
                await Http.PutJsonAsync("api/Player/New", new { DeviceId = _deviceId, Player = JsonConvert.SerializeObject(player) });
                OnNewPlayerPopupClosed();
            }
            else
            {
                _createNewPlayerErrorMessage = $"Player named '{NewPlayerName}' already exists!";
            }
        }
        else
        {
            _createNewPlayerErrorMessage = "Please enter a non-empty player name!";
        }
    }

    private async Task RandomiseTeamsAsync()
    {
        _players = await Http.PostJsonAsync<List<Player>>($"api/Player/RandomiseTeams?deviceId={_deviceId}", null);
    }

    private bool TeamsValid()
    {
        _validationErrors.Clear();

        if (!_players.Any(p => p.Team == Team.Red && p.IsSpymaster))
        {
            _validationErrors.Add("The Red Team must have a Spymaster!");
        }

        if (!_players.Any(p => p.Team == Team.Red && !p.IsSpymaster))
        {
            _validationErrors.Add("The Red Team must have at least one guesser!");
        }

        if (!_players.Any(p => p.Team == Team.Blue && p.IsSpymaster))
        {
            _validationErrors.Add("The Blue Team must have a Spymaster!");
        }

        if (!_players.Any(p => p.Team == Team.Blue && !p.IsSpymaster))
        {
            _validationErrors.Add("The Blue Team must have at least one guesser!");
        }

        return _validationErrors.Count == 0;
    }

    private void OnNewPlayerPopupClosed()
    {
        _showCreateNewPlayer = false;
        NewPlayerName = null;
        _createNewPlayerErrorMessage = null;
    }

    private void RemoveIdentificationIfNotFound()
    {
        if (!_players.Any(x => x.Name == Storage.GetItem("playerName")))
        {
            Storage.RemoveItem("playerName");
        }
    }

    private void HandleDeletedPlayer(Player player)
    {
        _players = _players.Where(p => p.Name != player.Name).ToList();
        StateHasChanged();
    }
}