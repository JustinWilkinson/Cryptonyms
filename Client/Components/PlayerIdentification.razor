@using Codenames.Client.Pages;

@inject LocalStorage Storage

<h1>Identify Yourself</h1>

@if (Parent.Game.Players.Any(x => !x.Identified))
{
    <div class="col pl-0">
        <p>Hi, you'll need to identify yourself as a player in order to join the game.</p>
        <table class="table table-striped table-bordered overflow-auto mb-3">
            <thead>
                <tr>
                    <th class="w-25">Player Name</th>
                    <th class="w-25">Team</th>
                    <th class="w-25">Role</th>
                    <th class="w-35">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in Parent.Game.Players.OrderBy(p => p.Name.ToLowerInvariant()))
                {
                    <tr>
                        <td class="align-middle">@player.Name</td>
                        <td class="align-middle @(player.Team == Team.Red ? "bg-danger" : "bg-primary") text-white">@player.Team</td>
                        <td class="align-middle">@(player.IsSpymaster ? "Spymaster" : "Guesser")</td>
                        <td class="align-middle">
                            @if (!player.Identified)
                            {
                                var playerName = Storage.GetItem("playerName");
                                if (playerName == null)
                                {
                                    <button class="btn btn-success" @onclick="() => ToggleIdentifyPlayer(player, true)">Identify as @player.Name</button>
                                }
                                else if (playerName == player.Name)
                                {
                                    <button class="btn btn-danger" @onclick="() => ToggleIdentifyPlayer(player, false)">Unidentify as @player.Name</button>
                                }
                                else
                                {
                                    <button class="btn btn-success" disabled>Identify as @player.Name</button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-success" disabled>Player already identified</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="ConfirmAsync" disabled="@(Parent.IdentifiedPlayer == null)">Confirm</button>
    </div>
}
else
{
    <div>
        <p>All the players in this game have been identified. Please <NavLink href="NewGame" Match="NavLinkMatch.All">click here</NavLink> to create a new game.</p>
        <p>Alternatively, you can create a new player and join the game using the form below.</p>
    </div>
    <div class="row">
        <div class="col-6">
            <div class="form-inline">
                <label class="d-inline-block mr-2" for="newPlayerName">Name:</label>
                <input id="newPlayerName" type="text" class="form-control mr-2" @bind="NewPlayerName" placeholder="Enter your name here..." autocomplete="off"/>
                @if (_createNewPlayerErrorMessage != null)
                {
                    <label class="text-danger">@_createNewPlayerErrorMessage</label>
                }
                <button id="saveNewPlayer" type="button" class="btn btn-primary" @onclick="AddNewPlayerAsync">Save</button>
            </div>
        </div>
    </div>
}



@code {
    [CascadingParameter]
    public PlayGame Parent { get; set; }

    [Parameter]
    public Action OnPlayerIdentified { get; set; }

    private string NewPlayerName { get; set; }
    private string _createNewPlayerErrorMessage;

    private List<string> _validationErrors = new List<string>();

    protected override void OnInitialized()
    {
        Storage.RemoveItem("playerName");
    }

    private void ToggleIdentifyPlayer(Player player, bool identified)
    {
        if (identified)
        {
            Storage.SetItem("playerName", player.Name);
            Parent.IdentifiedPlayer = player;
        }
        else
        {
            Storage.RemoveItem("playerName");
            Parent.IdentifiedPlayer = null;
        }
    }

    private async Task ConfirmAsync()
    {
        if (Parent.IdentifiedPlayer != null)
        {
            await Parent.IdentifyPlayerInGameAsync();
            OnPlayerIdentified.Invoke();
        }
        else
        {
            Storage.RemoveItem("playerName");
        }
    }

    private async Task AddNewPlayerAsync()
    {
        if (!string.IsNullOrWhiteSpace(NewPlayerName))
        {
            if (!Parent.Game.Players.Any(p => p.Name == NewPlayerName))
            {
                var random = new Random();
                var team = Parent.Game.Players.GroupBy(x => x.Team).OrderBy(g => g.Count()).ThenBy(x => random.Next()).First().Key;

                Parent.IdentifiedPlayer = new Player { Name = NewPlayerName, Identified = true, Team = team };
                Storage.SetItem("playerName", Parent.IdentifiedPlayer.Name);
                Parent.Game.Players.Add(Parent.IdentifiedPlayer);

                await Parent.AddPlayerToGameAsync();
                await Parent.IdentifyPlayerInGameAsync();
            }
            else
            {
                _createNewPlayerErrorMessage = $"Player named '{NewPlayerName}' already exists!";
            }
        }
        else
        {
            _createNewPlayerErrorMessage = "Please enter a non-empty player name!";
        }
    }
}