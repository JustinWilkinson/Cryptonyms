@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (_chatMessages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="border rounded card @AdditionalStyleClass" style="height: @Height;">
        <div class="card-header">
            <h6 class="card-title mb-0">@Title</h6>
        </div>
        <div id="@Id" class="card-body overflow-auto p-0">
            <ul class="list-group">
                @foreach (var chatMessage in _chatMessages.OrderBy(c => c.SentAt))
                {
                    <li class="list-group-item small pt-2 pb-2" title="Sent at @chatMessage.SentAt.ToLocalTime().ToString("HH:mm:ss")">
                        <span class="font-weight-bold">@chatMessage.PlayerName:</span> @chatMessage.Message
                    </li>
                }
            </ul>
        </div>
        <div class="card-footer pt-2 pb-2">
            <input id="@($"new{Id}")" type="text" class="form-control w-100" style="font-size: small;" value="@newMessage" @oninput="e => newMessage = e.Value.ToString()" @onkeydown="@(e => HandleKeyDown(e))" />
        </div>
    </div>
}

@code {
    private List<GameMessage> _chatMessages;

    [CascadingParameter]
    public HubConnection HubConnection { get; set; }

    [CascadingParameter]
    public Player Player { get; set; }

    [Parameter]
    public string OverrideHubGroup { get; set; }

    [Parameter]
    public string ChatId { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string AdditionalStyleClass { get; set; }

    private string newMessage;

    protected override async Task OnInitializedAsync()
    {
        _chatMessages = JsonConvert.DeserializeObject<List<GameMessage>>(await Http.GetStringAsync($"api/Message/GetGameMessagesForGroup?messageBoardId={ChatId}"));

        HubConnection.On<GameMessage>(Id, chatMessage =>
        {
            _chatMessages.Add(chatMessage);
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("codenames.scrollToBottomOfElement", Id);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await JSRuntime.InvokeVoidAsync("codenames.blurElement", Id);
        }
        else if (e.Key == "Enter")
        {
            await SendChatMessageAsync();
        }
    }

    private async Task SendChatMessageAsync()
    {
        var chatMessage = new GameMessage(Player.Name, newMessage);
        _chatMessages.Add(chatMessage);
        await Task.WhenAll(
            Http.PutJsonAsync("api/Message/AddMessage", new { MessageBoardId = ChatId, GameMessage = JsonConvert.SerializeObject(chatMessage) }),
            HubConnection.InvokeAsync("SendGameMessageAsync", OverrideHubGroup ?? ChatId, Id, chatMessage));
        await JSRuntime.InvokeVoidAsync("codenames.scrollToBottomOfElement", Id);
        newMessage = null;
    }
}
