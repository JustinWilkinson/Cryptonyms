@using Codenames.Client.Pages;
@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject LocalStorage Storage

<h1>Identify Yourself</h1>

<div class="col-sm-9 col-lg-9">
    @if (Parent.Game.Players.Any(x => !x.Identified))
    {
        <p>Hi, you'll need to identify yourself as a player in order to join the game.</p>
        <table class="table table-striped table-bordered overflow-auto" style="margin-bottom: 1em;">
            <thead>
                <tr>
                    <th class="w-25">Player Name</th>
                    <th class="w-25">Team</th>
                    <th class="w-25">Role</th>
                    <th class="w-35">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in Parent.Game.Players.OrderBy(p => p.Name.ToLowerInvariant()))
                {
                    <tr>
                        <td class="align-middle">@player.Name</td>
                        <td class="align-middle @(player.Team == Team.Red ? "bg-danger" : "bg-primary") text-white">@player.Team</td>
                        <td class="align-middle">@(player.IsSpymaster ? "Spymaster" : "Guesser")</td>
                        <td class="align-middle">
                            @if (!player.Identified)
                            {
                                var playerName = Storage.GetItem("playerName");
                                if (playerName == null)
                                {
                                    <button class="btn btn-success" @onclick="() => ToggleIdentifyPlayer(player, true)">Identify as @player.Name</button>
                                }
                                else if (playerName == player.Name)
                                {
                                    <button class="btn btn-danger" @onclick="() => ToggleIdentifyPlayer(player, false)">Unidentify as @player.Name</button>
                                }
                                else
                                {
                                    <button class="btn btn-success" disabled>Identify as @player.Name</button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-success" disabled>Player already identified</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="ConfirmAsync" disabled="@(Parent.IdentifiedPlayer == null)">Confirm</button>
    }
    else
    {
        <div>Sorry, but all the players in this game have been identified. Please <NavLink href="NewGame" Match="NavLinkMatch.All">click here</NavLink> to create a new game.</div>
    }
</div>


@code {
    [CascadingParameter]
    public PlayGame Parent { get; set; }

    [Parameter]
    public HubConnection HubConnection { get; set; }

    [Parameter]
    public Action OnPlayerIdentified { get; set; }

    protected override void OnInitialized()
    {
        Storage.RemoveItem("playerName");
    }

    private void ToggleIdentifyPlayer(Player player, bool identified)
    {
        if (identified)
        {
            Storage.SetItem("playerName", player.Name);
            Parent.IdentifiedPlayer = player;
        }
        else
        {
            Storage.RemoveItem("playerName");
            Parent.IdentifiedPlayer = null;
        }
    }

    private async Task ConfirmAsync()
    {
        if (Parent.IdentifiedPlayer != null)
        {
            await Http.PostJsonAsync("api/Game/SaveIdentifiedPlayer", JsonConvert.SerializeObject(new { GameId = Parent.Game.GameId, Player = Parent.IdentifiedPlayer }));
            await HubConnection.InvokeAsync("UpdatePlayerIdentificationAsync", Parent.Game.GameId);
            OnPlayerIdentified.Invoke();
        }
        else
        {
            Storage.RemoveItem("playerName");
        }
    }
}