@page "/PlayGame/{GameId}"

@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject LocalStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-inline-block" style="width: 100%;">
        <div class="@(identifiedPlayer.Team == Team.Red ? "bg-danger" : "bg-primary") d-inline-block rounded float-left" style="padding: 0.25em;">
            <h6 class="text-white mb-0">Hi @identifiedPlayer.Name, you are playing as @(identifiedPlayer.IsSpymaster ? "the spymaster" : "a guesser") on the @identifiedPlayer.Team team.</h6>
        </div>
        <div class="d-inline-block float-right" style="font-size: 0.8em;">
            <p class="d-inline-block">Started game with @string.Join(", ", game.Players.Select(x => x.Name)) at @game.StartedAtUtc.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</p>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-10 col-lg-10 pr-0">
            @if (game.CompletedMessage != null && showCompletionMessage)
            {
                <div class="modal" tabindex="-1" style="display:block;" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Game Over!</h5>
                                <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                            </div>
                            <div class="modal-body">
                                <h6>@game.CompletedMessage</h6>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-sm-2 col-lg-2 card bg-primary padded-card">
                    <div class="card-body text-center font-weight-bold text-white" style="padding: 0;">@BlueWordsRemaining @(BlueWordsRemaining == 1 ? "word" : "words") left</div>
                </div>
                <div class="col-sm-1 col-lg-1 padded-card"></div>
                <div class="col-sm-4 col-lg-4 padded-card border border-secondary rounded">
                    <div class="card-body text-center font-weight-bold" style="padding: 0;">
                        @if (game.CurrentTurn.Clue != null)
                        {
                            <span>@game.CurrentTurn.Team.ToString() team's turn: @(game.CurrentTurn.NumberOfGuesses == 1 ? "Bonus Guess" : $"{game.CurrentTurn.Clue} - {game.CurrentTurn.NumberOfGuesses - 1}")</span>
                        }
                        else
                        {
                            <span>@game.CurrentTurn.Team.ToString() team's turn</span>
                        }
                    </div>
                </div>
                <div class="col-sm-1 col-lg-1 padded-card"></div>
                <div class="col-sm-2 col-lg-2 card bg-danger padded-card">
                    <div class="card-body text-center font-weight-bold text-white" style="padding: 0;">@RedWordsRemaining @(RedWordsRemaining == 1 ? "word" : "words") left</div>
                </div>
            </div>
            @for (var i = 0; i < 5; i++)
            {
                <div class="row">
                    @for (var j = 0; j < 5; j++)
                    {
                        var wordIndex = 5 * i + j;
                        if (game.GuessedWords.Contains(wordIndex))
                        {
                            <div class="col-sm-2 col-lg-2 card @GetBackgroundColourClass(wordIndex) empty-padded-card"></div>
                        }
                        else
                        {
                            <div class="col-sm-2 col-lg-2 card padded-card @GetBackgroundColourClassForSpymaster(wordIndex)" @onclick="e => HandleWordGuessedAsync(wordIndex)">
                                <div class="card-body text-center font-weight-bold bg-light" style="padding: 0.25em 0;">@game.Words[wordIndex]</div>
                            </div>
                        }
                    }
                </div>
            }
            @if (game.CurrentTurn.Clue == null && identifiedPlayer.IsSpymaster && identifiedPlayer.Team == game.CurrentTurn.Team)
            {
                <div class="row" style="padding: 1em;">
                    <div class="form-inline">
                        <div class="form-group" style="margin-right: 1em;">
                            <label for="Clue" class="font-weight-bold" style="margin-right: 0.5em;">Clue:</label>
                            <input id="Clue" type="text" @bind="currentClue" class="form-control" />
                        </div>
                        <div class="form-group" style="margin-right: 1em;">
                            <label for="NumberOfGuesses" class="font-weight-bold" style="margin-right: 0.5em;">Number of words linked:</label>
                            <input id="NumberOfGuesses" type="number" min="0" max="@WordsRemainingForCurrentTeam" @bind="currentNumberOfWordsLinked" @oninput="e => currentNumberOfWordsLinked = Convert.ToInt32(e.Value)" class="form-control" />
                        </div>
                        <button type="button" class="btn btn-primary" @onclick="GiveClueAsync">Give clue</button>
                        @if (clueErrorMessage != null)
                        {
                            <label class="text-danger" style="margin-left: 0.5em;">@clueErrorMessage</label>
                        }
                    </div>
                </div>
            }
            else if (!game.CompletedAtUtc.HasValue && game.CurrentTurn.Clue != null && !identifiedPlayer.IsSpymaster && identifiedPlayer.Team == game.CurrentTurn.Team)
            {
                <div class="row" style="padding: 1em;">
                    <div class="form-inline">
                        <button class="btn btn-@(identifiedPlayer.Team == Team.Red ? "danger" : "primary")" @onclick="PassTurnAsync">Pass</button>
                    </div>
                </div>
            }
        </div>
        <div class="col-sm-2 col-lg-2 mt-3 pl-0">
            <div class="border rounded p-1 card" style="max-height: @(showRoleChat ? "26.6667vh" : "40vh");">
                <div class="card-header">
                    <h5 class="card-title">Game Log</h5>
                </div>
                <div id="GameLog" class="card-body overflow-auto p-0">
                    <ul class="list-group">
                        @foreach (var gameLogMessage in _gameLogMessages.OrderBy(c => c.SentAt))
                        {
                            <li class="list-group-item small">
                                <strong>@gameLogMessage.SentAt.ToLocalTime().ToString("HH:mm:ss"):</strong> @gameLogMessage.PlayerName @gameLogMessage.Message
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <CascadingValue Value="_hubConnection">
                <CascadingValue Value="identifiedPlayer">
                    <Chat Id="GlobalChat" Title="Global Chat" ChatId="@($"{GameId}-Global")" MaxHeight="@(showRoleChat ? "26.6667vh" : "40vh")" AdditionalStyleClass="@(showRoleChat ? "mt-2" : "mt-1")" OverrideHubGroup="@GameId"/>
                    @if (showRoleChat)
                    {
                        <Chat Id="RoleChat" Title="@(identifiedPlayer.IsSpymaster ? "Spymaster Chat" : $"{identifiedPlayer.Team} Guessers Chat")" ChatId="@roleChatId" MaxHeight="26.6667vh" AdditionalStyleClass="@(showRoleChat ? "mt-2" : "mt-1")" />
                    }
                </CascadingValue>
            </CascadingValue>
        </div>
    </div>
}

@code {
    private HubConnection _hubConnection;
    private List<GameMessage> _gameLogMessages;

    private Game game;
    private bool showCompletionMessage;
    private string clueErrorMessage;
    private int RedWordsRemaining => game.RedWords.Except(game.GuessedWords).Count();
    private int BlueWordsRemaining => game.BlueWords.Except(game.GuessedWords).Count();
    private int WordsRemainingForCurrentTeam => game.CurrentTurn.Team == Team.Red ? RedWordsRemaining : BlueWordsRemaining;
    private Player identifiedPlayer;

    private string currentClue = null;
    private int currentNumberOfWordsLinked = 0;

    private bool showRoleChat => identifiedPlayer.IsSpymaster || !identifiedPlayer.IsSpymaster && game.Players.Any(p => p.Team == identifiedPlayer.Team && !p.IsSpymaster && p.Name != identifiedPlayer.Name);
    private string roleChatId => identifiedPlayer.IsSpymaster ? $"{GameId}-Spymaster" : $"{GameId}-{identifiedPlayer.Team}Guesser";

    [Parameter]
    public string GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        game = JsonConvert.DeserializeObject<Game>(await Http.GetStringAsync($"api/Game/Get?id={GameId}"));
        _gameLogMessages = JsonConvert.DeserializeObject<List<GameMessage>>(await Http.GetStringAsync($"api/Message/GetGameMessagesForGroup?messageBoardId={GameId}-GameLog"));

        identifiedPlayer = game.Players.SingleOrDefault(x => x.Name == Storage.GetItem("playerName"));
        if (identifiedPlayer == null)
        {
            NavigationManager.NavigateTo($"Game/{GameId}/PlayerIdentification/");
        }
        else if (!identifiedPlayer.Identified)
        {
            await Http.PostJsonAsync("api/Game/SaveIdentifiedPlayer", JsonConvert.SerializeObject(new { GameId = GameId, Player = identifiedPlayer }));
        }

        await ConfigureHubAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("codenames.scrollToBottomOfElement", "GameLog");
        }
    }

    private async Task ConfigureHubAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/GameHub")).WithAutomaticReconnect().Build();
        _hubConnection.On<string>("UpdateGame", updatedGame =>
        {
            game = JsonConvert.DeserializeObject<Game>(updatedGame);
            if (game.WinnningTeam.HasValue)
            {
                showCompletionMessage = true;
            }
            StateHasChanged();
        });
        _hubConnection.On<GameMessage>("NewGameLogMessage", gameLogMessage =>
        {
            _gameLogMessages.Add(gameLogMessage);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        await Task.WhenAll(_hubConnection.InvokeAsync("AddToGroupAsync", GameId), _hubConnection.InvokeAsync("AddToGroupAsync", roleChatId));
    }

    private async Task HandleWordGuessedAsync(int wordIndex)
    {
        if (game.CurrentTurn.Clue != null && !identifiedPlayer.IsSpymaster && identifiedPlayer.Team == game.CurrentTurn.Team)
        {
            string messageSuffix;
            if (game.CompletedMessage == null)
            {
                game.GuessedWords.Add(wordIndex);

                if (game.Assassin == wordIndex)
                {
                    game.WinnningTeam = (Team)(1 - game.CurrentTurn.Team);
                    game.CompletedMessage = $"{identifiedPlayer.Name} bumped into the assassin and was killed!";
                }
                else if (game.BlueWords.All(bw => game.GuessedWords.Contains(bw)))
                {
                    game.CompletedMessage = "Team blue wins!";
                    game.WinnningTeam = Team.Blue;
                }
                else if (game.RedWords.All(rw => game.GuessedWords.Contains(rw)))
                {
                    game.CompletedMessage = "Team red wins!";
                    game.WinnningTeam = Team.Red;
                }

                if (game.CompletedMessage != null)
                {
                    showCompletionMessage = true;
                    game.CompletedAtUtc = DateTime.UtcNow;
                    messageSuffix = $". {game.CompletedMessage}";
                }
                else
                {
                    if (game.CurrentTurn.Team == Team.Red && !game.RedWords.Contains(wordIndex))
                    {
                        game.CurrentTurn = new Turn { Team = Team.Blue };
                        messageSuffix = "incorrectly. Blue team's turn started...";
                    }
                    else if (game.CurrentTurn.Team == Team.Blue && !game.BlueWords.Contains(wordIndex))
                    {
                        game.CurrentTurn = new Turn { Team = Team.Red };
                        messageSuffix = "incorrectly. Red team's turn started...";
                    }
                    else
                    {
                        messageSuffix = "correctly";

                        game.CurrentTurn.NumberOfGuesses = game.CurrentTurn.NumberOfGuesses - 1;
                        if (game.CurrentTurn.NumberOfGuesses == 0)
                        {
                            game.CurrentTurn = new Turn { Team = (Team)(1 - game.CurrentTurn.Team) };
                            messageSuffix += $". All guesses used up. {game.CurrentTurn.Team} team's turn started...";
                        }
                    }
                }

                await UpdateGameAsync($"guessed {game.Words[wordIndex]} {messageSuffix}.");
            }
        }
    }

    private async Task PassTurnAsync()
    {
        game.CurrentTurn = new Turn { Team = (Team)(1 - game.CurrentTurn.Team) };
        await UpdateGameAsync($"passed. {game.CurrentTurn.Team} team's turn started...");
    }

    private string GetBackgroundColourClass(int wordIndex)
    {
        if (game.Assassin == wordIndex)
        {
            return "bg-dark";
        }
        else if (game.BlueWords.Contains(wordIndex))
        {
            return "bg-primary";
        }
        else if (game.RedWords.Contains(wordIndex))
        {
            return "bg-danger";
        }
        else
        {
            return "bg-warning";
        }
    }

    private string GetBackgroundColourClassForSpymaster(int wordIndex) => identifiedPlayer.IsSpymaster ? GetBackgroundColourClass(wordIndex) : "bg-warning";

    private void ClosePopup() => showCompletionMessage = false;

    private async Task GiveClueAsync()
    {
        if (string.IsNullOrWhiteSpace(currentClue))
        {
            clueErrorMessage = "Clue cannot be blank!";
        }
        else if (game.Words.Any(x => x.Value.ToLower() == currentClue.ToLower() && !game.GuessedWords.Contains(x.Key)))
        {
            clueErrorMessage = "Clue cannot be an uncovered word!";
        }
        else if (currentClue.Contains(' '))
        {
            clueErrorMessage = "Clue must be a single word!";
        }
        else if (currentNumberOfWordsLinked < 1 || currentNumberOfWordsLinked > WordsRemainingForCurrentTeam)
        {
            clueErrorMessage = $"Number of words linked must be between 1 and {WordsRemainingForCurrentTeam}!";
        }
        else
        {
            game.CurrentTurn.Clue = currentClue;
            game.CurrentTurn.NumberOfGuesses = currentNumberOfWordsLinked + 1;
            await UpdateGameAsync($"gave clue: {currentClue} for {currentNumberOfWordsLinked}.");
            currentClue = null;
            currentNumberOfWordsLinked = 0;
            clueErrorMessage = null;
        }
    }

    private async Task UpdateGameLogAsync(string logMessage)
    {
        var gameLogId = $"{GameId}-GameLog";
        var gameLogMessage = new GameMessage(identifiedPlayer.Name, logMessage);
        _gameLogMessages.Add(gameLogMessage);
        await Task.WhenAll(
            Http.PutJsonAsync("api/Message/AddMessage", new { MessageBoardId = gameLogId, GameMessage = JsonConvert.SerializeObject(gameLogMessage) }),
            _hubConnection.InvokeAsync("SendGameMessageAsync", GameId, "NewGameLogMessage", gameLogMessage));
        await JSRuntime.InvokeVoidAsync("codenames.scrollToBottomOfElement", "GameLog");
    }

    private async Task UpdateGameAsync(string logMessage)
    {
        var serializedGame = JsonConvert.SerializeObject(game);
        await Task.WhenAll(Http.PostJsonAsync("api/Game/Save", serializedGame), _hubConnection.InvokeAsync("UpdateGameAsync", GameId, serializedGame), UpdateGameLogAsync(logMessage));
    }
}