@page "/PlayGame/{GameId}"

@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject LocalStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (Game == null)
{
    <p><em>Loading...</em></p>
}
else if (IdentifiedPlayer == null)
{
    <CascadingValue Value="this">
        <PlayerIdentification HubConnection="_hubConnection" OnPlayerIdentified="StateHasChanged" />
    </CascadingValue>
}
else
{
    <div class="row pl-2">
        <div class="col-sm-auto col-lg-auto mr-auto @(IdentifiedPlayer.Team == Team.Red ? "bg-danger" : "bg-primary") rounded text-center p-1">
            <p class="text-white mb-0">Hi @IdentifiedPlayer.Name, you are playing as @(IdentifiedPlayer.IsSpymaster ? "the spymaster" : "a guesser") on the @IdentifiedPlayer.Team team.</p>
        </div>
        <div class="col-sm-auto col-lg-auto small text-right">
            <p>Started game with @string.Join(", ", Game.Players.Select(x => x.Name)) at @Game.StartedAtUtc.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</p>
        </div>
    </div>
    <div class="row">
        <div class="w-75 pl-2 pr-2 mr-auto">
            @if (Game.CompletedMessage != null && showCompletionMessage)
            {
                <div class="modal d-block" tabindex="-1" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Game Over!</h5>
                                <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                            </div>
                            <div class="modal-body">
                                <h6>@Game.CompletedMessage</h6>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="row adjustable-font-size">
                <CascadingValue Value="Game.Players">
                    <TeamInfo Team="Team.Blue" WordsRemaining="BlueWordsRemaining" />
                    <div class="col card border border-secondary rounded padded-card adjustable-font-size p-1">
                        <div class="card-body text-center font-weight-bold">
                            @if (Game.CurrentTurn.Clue != null)
                            {
                                <span>@Game.CurrentTurn.Team.ToString() team's turn: @(Game.CurrentTurn.NumberOfGuesses == 1 ? "Bonus Guess" : $"{Game.CurrentTurn.Clue} - {Game.CurrentTurn.NumberOfGuesses - 1}")</span>
                            }
                            else
                            {
                                <span>@Game.CurrentTurn.Team.ToString() team's turn</span>
                            }
                            @if (!Game.CompletedAtUtc.HasValue && Game.CurrentTurn.Clue != null && !IdentifiedPlayer.IsSpymaster && IdentifiedPlayer.Team == Game.CurrentTurn.Team)
                            {
                                <div class="d-inline-block ml-2">
                                    <button class="btn btn-@(IdentifiedPlayer.Team == Team.Red ? "danger" : "primary") adjustable-font-size" style="line-height: 1em;" @onclick="PassTurnAsync">Pass</button>
                                </div>
                            }
                        </div>
                    </div>
                    <TeamInfo Team="Team.Red" WordsRemaining="RedWordsRemaining" />
                </CascadingValue>
            </div>
            @for (var i = 0; i < 5; i++)
            {
                <div class="row">
                    @for (var j = 0; j < 5; j++)
                    {
                        var wordIndex = 5 * i + j;
                        if (Game.GuessedWords.Contains(wordIndex))
                        {
                            <div class="col card @GetBackgroundColourClass(wordIndex) empty-padded-card adjustable-font-size"></div>
                        }
                        else
                        {
                            <div class="col card padded-card @GetBackgroundColourClassForSpymaster(wordIndex) adjustable-font-size" style="cursor: @(Game.CurrentTurn.Clue != null && !IdentifiedPlayer.IsSpymaster && IdentifiedPlayer.Team == Game.CurrentTurn.Team ? "pointer" :"");" @onclick="e => HandleWordGuessedAsync(wordIndex)">
                                <div class="card-body text-center font-weight-bold bg-light" style="padding: 0.25em 0;">@Game.Words[wordIndex]</div>
                            </div>
                        }
                    }
                </div>
            }
            @if (Game.CurrentTurn.Clue == null && IdentifiedPlayer.IsSpymaster && IdentifiedPlayer.Team == Game.CurrentTurn.Team)
            {
                <div class="row p-3 adjustable-font-size">
                    <div class="form-inline">
                        <div class="form-group mr-2">
                            <label for="Clue" class="font-weight-bold mr-2">Clue:</label>
                            <input id="Clue" type="text" @bind="currentClue" class="form-control adjustable-font-size" autocomplete="off"/>
                        </div>
                        <div class="form-group mr-3">
                            <label for="NumberOfGuesses" class="font-weight-bold mr-2">Number of words linked:</label>
                            <input id="NumberOfGuesses" type="number" min="0" max="@WordsRemainingForCurrentTeam" @bind="currentNumberOfWordsLinked" @oninput="e => currentNumberOfWordsLinked = Convert.ToInt32(e.Value)" class="form-control adjustable-font-size" />
                        </div>
                        <button type="button" class="btn btn-primary adjustable-font-size" @onclick="GiveClueAsync">Give clue</button>
                        @if (clueErrorMessage != null)
                        {
                            <label class="text-danger ml-2">@clueErrorMessage</label>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="mt-3" style="width: 20%;">
            <TabControl OnTabSelected="HandleTabSelectedAsync">
                <TabPage ButtonId="GameLogTab" Title="Game Log" OnTabSelected="() => _unreadGameLogMessageCount = 0">
                    <div class="card border rounded">
                        <div id="GameLog" class="card-body overflow-auto p-0" style="height: 75vh;">
                            <ul class="list-group">
                                @foreach (var gameLogMessage in _gameLogMessages.OrderBy(c => c.SentAt))
                                {
                                    <li class="list-group-item adjustable-font-size-small pt-2 pb-2">
                                        <strong>@gameLogMessage.SentAt.ToLocalTime().ToString("HH:mm:ss"):</strong> @gameLogMessage.PlayerName @gameLogMessage.Message
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </TabPage>
                <CascadingValue Value="_hubConnection">
                    <CascadingValue Value="IdentifiedPlayer">
                        <TabPage ButtonId="GlobalChatTab" Title="Global Chat" OnTabSelected="() => _unreadGlobalMessageCount = 0">
                            <Chat Id="GlobalChat" ChatId="@($"{GameId}-Global")" OverrideHubGroup="@GameId" ChatMessages="_globalChatMessages" />
                        </TabPage>
                        @if (showRoleChat)
                        {
                            <TabPage ButtonId="RoleChatTab" Title="@roleChatName" OnTabSelected="() => _unreadRoleMessageCount = 0">
                                <Chat Id="RoleChat" ChatId="@roleChatId" ChatMessages="_roleChatMessages" />
                            </TabPage>
                        }
                    </CascadingValue>
                </CascadingValue>
            </TabControl>

        </div>
    </div>
}

@code {
    private HubConnection _hubConnection;
    private List<GameMessage> _gameLogMessages;
    private List<GameMessage> _globalChatMessages;
    private List<GameMessage> _roleChatMessages;
    private int _unreadGameLogMessageCount = 0;
    private int _unreadGlobalMessageCount = 0;
    private int _unreadRoleMessageCount = 0;
    private string _selectedTab = "GameLogTab";


    public Player IdentifiedPlayer;
    public Game Game;
    private bool showCompletionMessage;
    private string clueErrorMessage;
    private int RedWordsRemaining => Game.RedWords.Except(Game.GuessedWords).Count();
    private int BlueWordsRemaining => Game.BlueWords.Except(Game.GuessedWords).Count();
    private int WordsRemainingForCurrentTeam => Game.CurrentTurn.Team == Team.Red ? RedWordsRemaining : BlueWordsRemaining;

    private string currentClue = null;
    private int currentNumberOfWordsLinked = 0;

    private bool showRoleChat => IdentifiedPlayer.IsSpymaster || !IdentifiedPlayer.IsSpymaster && Game.Players.Any(p => p.Team == IdentifiedPlayer.Team && !p.IsSpymaster && p.Name != IdentifiedPlayer.Name);
    private string roleChatId => IdentifiedPlayer.IsSpymaster ? $"{GameId}-Spymaster" : $"{GameId}-{IdentifiedPlayer.Team}Guesser";
    private string roleChatName => IdentifiedPlayer.IsSpymaster? "Spymaster Chat" : $"{IdentifiedPlayer.Team} Guessers Chat";

    [Parameter]
    public string GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Game = JsonConvert.DeserializeObject<Game>(await Http.GetStringAsync($"api/Game/Get?id={GameId}"));
        _gameLogMessages = JsonConvert.DeserializeObject<List<GameMessage>>(await Http.GetStringAsync($"api/Message/GetGameMessagesForGroup?messageBoardId={GameId}-GameLog"));
        _globalChatMessages = JsonConvert.DeserializeObject<List<GameMessage>>(await Http.GetStringAsync($"api/Message/GetGameMessagesForGroup?messageBoardId={GameId}-Global"));

        await ConfigureHubAsync();
        IdentifiedPlayer = Game.Players.SingleOrDefault(x => x.Name == Storage.GetItem("playerName"));
        if (IdentifiedPlayer != null)
        {
            if (!IdentifiedPlayer.Identified)
            {
                await Http.PostJsonAsync("api/Game/SaveIdentifiedPlayer", JsonConvert.SerializeObject(new { GameId = GameId, Player = IdentifiedPlayer }));
                await _hubConnection.InvokeAsync("UpdatePlayerIdentificationAsync", Game.GameId);
            }

            await _hubConnection.InvokeAsync("AddToGroupAsync", roleChatId);
            _roleChatMessages = JsonConvert.DeserializeObject<List<GameMessage>>(await Http.GetStringAsync($"api/Message/GetGameMessagesForGroup?messageBoardId={roleChatId}"));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && IdentifiedPlayer != null)
        {
            await JSRuntime.InvokeVoidAsync("codenames.scrollToBottomOfElement", "GameLog");
            await JSRuntime.InvokeVoidAsync("codenames.replaceAllContent", "GameLogTab", $"Game Log{(_unreadGameLogMessageCount > 0 ? $" ({_unreadGameLogMessageCount})" : "")}");
            await JSRuntime.InvokeVoidAsync("codenames.replaceAllContent", "GlobalChatTab", $"Global Chat{(_unreadGlobalMessageCount > 0 ? $" ({_unreadGlobalMessageCount})" : "")}");
            await JSRuntime.InvokeVoidAsync("codenames.replaceAllContent", "RoleChatTab", $"{roleChatName}{(_unreadRoleMessageCount > 0 ? $" ({_unreadRoleMessageCount})" : "")}");
        }
    }

    private async Task HandleTabSelectedAsync(TabPage page)
    {
        _selectedTab = page.ButtonId;
        await JSRuntime.InvokeVoidAsync("codenames.replaceContent", page.ButtonId, @"\s\(\d+\)", "");
    }

    private async Task ConfigureHubAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/GameHub")).WithAutomaticReconnect().Build();
        _hubConnection.On<string>("UpdateGame", updatedGame =>
        {
            Game = JsonConvert.DeserializeObject<Game>(updatedGame);
            if (Game.WinnningTeam.HasValue)
            {
                showCompletionMessage = true;
            }
            StateHasChanged();
        });
        _hubConnection.On<GameMessage>("NewGameLogMessage", gameLogMessage =>
        {
            _gameLogMessages.Add(gameLogMessage);
            if (_selectedTab != "GameLogTab")
            {
                _unreadGameLogMessageCount++;
            }
            StateHasChanged();
        });
        _hubConnection.On<GameMessage>("GlobalChat", globalChatMessage =>
        {
            _globalChatMessages.Add(globalChatMessage);
            if (_selectedTab != "GlobalChatTab")
            {
                _unreadGlobalMessageCount++;
            }
            StateHasChanged();
        });
        _hubConnection.On<GameMessage>("RoleChat", roleChatMessage =>
        {
            _roleChatMessages.Add(roleChatMessage);
            if (_selectedTab != "RoleChatTab")
            {
                _unreadRoleMessageCount++;
            }
            StateHasChanged();
        });
        _hubConnection.On("UpdatePlayerIdentification", async () =>
        {
            Game = JsonConvert.DeserializeObject<Game>(await Http.GetStringAsync($"api/Game/Get?id={GameId}"));
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("AddToGroupAsync", GameId);
    }

    private async Task HandleWordGuessedAsync(int wordIndex)
    {
        if (Game.CurrentTurn.Clue != null && !IdentifiedPlayer.IsSpymaster && IdentifiedPlayer.Team == Game.CurrentTurn.Team)
        {
            string messageSuffix;
            if (Game.CompletedMessage == null)
            {
                Game.GuessedWords.Add(wordIndex);

                if (Game.Assassin == wordIndex)
                {
                    Game.WinnningTeam = (Team)(1 - Game.CurrentTurn.Team);
                    Game.CompletedMessage = $"{IdentifiedPlayer.Name} bumped into the assassin and was killed!";
                }
                else if (Game.BlueWords.All(bw => Game.GuessedWords.Contains(bw)))
                {
                    Game.CompletedMessage = "Team blue wins!";
                    Game.WinnningTeam = Team.Blue;
                }
                else if (Game.RedWords.All(rw => Game.GuessedWords.Contains(rw)))
                {
                    Game.CompletedMessage = "Team red wins!";
                    Game.WinnningTeam = Team.Red;
                }

                if (Game.CompletedMessage != null)
                {
                    showCompletionMessage = true;
                    Game.CompletedAtUtc = DateTime.UtcNow;
                    messageSuffix = $". {Game.CompletedMessage}";
                }
                else
                {
                    if (Game.CurrentTurn.Team == Team.Red && !Game.RedWords.Contains(wordIndex))
                    {
                        Game.CurrentTurn = new Turn { Team = Team.Blue };
                        messageSuffix = "incorrectly. Blue team's turn started.";
                    }
                    else if (Game.CurrentTurn.Team == Team.Blue && !Game.BlueWords.Contains(wordIndex))
                    {
                        Game.CurrentTurn = new Turn { Team = Team.Red };
                        messageSuffix = "incorrectly. Red team's turn started.";
                    }
                    else
                    {
                        messageSuffix = "correctly";

                        Game.CurrentTurn.NumberOfGuesses = Game.CurrentTurn.NumberOfGuesses - 1;
                        if (Game.CurrentTurn.NumberOfGuesses == 0)
                        {
                            Game.CurrentTurn = new Turn { Team = (Team)(1 - Game.CurrentTurn.Team) };
                            messageSuffix += $". All guesses used up. {Game.CurrentTurn.Team} team's turn started.";
                        }
                    }
                }

                await UpdateGameAsync($"guessed {Game.Words[wordIndex]} {messageSuffix}");
            }
        }
    }

    private async Task PassTurnAsync()
    {
        Game.CurrentTurn = new Turn { Team = (Team)(1 - Game.CurrentTurn.Team) };
        await UpdateGameAsync($"passed. {Game.CurrentTurn.Team} team's turn started.");
    }

    private string GetBackgroundColourClass(int wordIndex)
    {
        if (Game.Assassin == wordIndex)
        {
            return "bg-dark";
        }
        else if (Game.BlueWords.Contains(wordIndex))
        {
            return "bg-primary";
        }
        else if (Game.RedWords.Contains(wordIndex))
        {
            return "bg-danger";
        }
        else
        {
            return "bg-warning";
        }
    }

    private string GetBackgroundColourClassForSpymaster(int wordIndex) => IdentifiedPlayer.IsSpymaster ? GetBackgroundColourClass(wordIndex) : "bg-warning";

    private void ClosePopup() => showCompletionMessage = false;

    private async Task GiveClueAsync()
    {
        if (string.IsNullOrWhiteSpace(currentClue))
        {
            clueErrorMessage = "Clue cannot be blank!";
        }
        else if (Game.Words.Any(x => x.Value.ToLower() == currentClue.ToLower() && !Game.GuessedWords.Contains(x.Key)))
        {
            clueErrorMessage = "Clue cannot be an uncovered word!";
        }
        else if (currentClue.Contains(' '))
        {
            clueErrorMessage = "Clue must be a single word!";
        }
        else if (currentNumberOfWordsLinked < 1 || currentNumberOfWordsLinked > WordsRemainingForCurrentTeam)
        {
            clueErrorMessage = $"Number of words linked must be between 1 and {WordsRemainingForCurrentTeam}!";
        }
        else
        {
            Game.CurrentTurn.Clue = currentClue;
            Game.CurrentTurn.NumberOfGuesses = currentNumberOfWordsLinked + 1;
            await UpdateGameAsync($"gave clue: {currentClue} for {currentNumberOfWordsLinked}.");
            currentClue = null;
            currentNumberOfWordsLinked = 0;
            clueErrorMessage = null;
        }
    }

    private async Task UpdateGameLogAsync(string logMessage)
    {
        var gameLogId = $"{GameId}-GameLog";
        var gameLogMessage = new GameMessage(IdentifiedPlayer.Name, logMessage);
        _gameLogMessages.Add(gameLogMessage);
        await Task.WhenAll(
            Http.PutJsonAsync("api/Message/AddMessage", new { MessageBoardId = gameLogId, GameMessage = JsonConvert.SerializeObject(gameLogMessage) }),
            _hubConnection.InvokeAsync("SendGameMessageAsync", GameId, "NewGameLogMessage", gameLogMessage));
        await JSRuntime.InvokeVoidAsync("codenames.scrollToBottomOfElement", "GameLog");
    }

    private async Task UpdateGameAsync(string logMessage)
    {
        var serializedGame = JsonConvert.SerializeObject(Game);
        await Task.WhenAll(Http.PostJsonAsync("api/Game/Save", serializedGame), _hubConnection.InvokeAsync("UpdateGameAsync", GameId, serializedGame), UpdateGameLogAsync(logMessage));
    }
}